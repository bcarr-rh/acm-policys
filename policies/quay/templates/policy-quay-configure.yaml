apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-quay-configure
  namespace: {{ .Values.autoshiftPolicyNamespace }}
  annotations:
    policy.open-cluster-management.io/standards: NIST SP 800-53
    policy.open-cluster-management.io/categories: CA Security Assessment and Authorization
    policy.open-cluster-management.io/controls: CA-2 Security Assessments, CA-7 Continuous Monitoring
spec:
  disabled: false
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-quay-deploy
    namespace: {{ .Values.autoshiftPolicyNamespace }}
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: configure-quay-serviceaccount
        spec:
          remediationAction: enforce
          severity: high
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: v1
                kind: ServiceAccount
                metadata:
                  name: create-admin-user
                  namespace: {{ .Values.quay.enterpriseNamespace }}
            - complianceType: musthave
              objectDefinition:
                apiVersion: rbac.authorization.k8s.io/v1
                kind: Role
                metadata:
                  name: create-admin-user
                  namespace: {{ .Values.quay.enterpriseNamespace }}
                rules:
                - apiGroups:
                  - ""
                  resources:
                  - secrets
                  verbs:
                  - get
                  - list
                  - create
                  - patch
                  - update
                  - delete
                - apiGroups:
                  - route.openshift.io
                  resources:
                  - routes
                  verbs:
                  - get
                  - list
                - apiGroups:
                  - quay.redhat.com
                  resources:
                  - quayregistries
                  verbs:
                  - get
                  - list
                  - watch
            - complianceType: musthave
              objectDefinition:
                apiVersion: rbac.authorization.k8s.io/v1
                kind: RoleBinding
                metadata:
                  name: create-admin-user
                  namespace: {{ .Values.quay.enterpriseNamespace }}
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: Role
                  name: create-admin-user
                subjects:
                - kind: ServiceAccount
                  name: create-admin-user
                  namespace: {{ .Values.quay.enterpriseNamespace }}
            - complianceType: musthave
              objectDefinition:
                apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: quay-config
                  namespace: {{ .Values.autoshiftPolicyNamespace }}
                data:
                  host: '{{ "{{" }} (lookup "route.openshift.io/v1" "Route" "{{ .Values.quay.enterpriseNamespace }}" "registry-quay" ).spec.host {{ "}}" }}'
            - complianceType: musthave
              objectDefinition:
                apiVersion: console.openshift.io/v1
                kind: ConsoleLink
                metadata:
                  name: quay
                spec:
                  applicationMenu:
                    section: Red Hat applications
                    imageURL: 'https://upload.wikimedia.org/wikipedia/commons/3/3a/OpenShift-LogoType.svg'
                  href: 'https://{{ "{{" }} (lookup "route.openshift.io/v1" "Route" "{{ .Values.quay.enterpriseNamespace }}" "registry-quay" ).spec.host {{ "}}" }}'
                  location: ApplicationMenu
                  text: 'Red Hat Quay Enterprise Registry'
            - complianceType: musthave
              objectDefinition:
                apiVersion: batch/v1
                kind: Job
                metadata:
                  name: create-admin-user
                  namespace: {{ .Values.quay.enterpriseNamespace }}
                spec:
                  template:
                    spec:
                      containers:
                      - command:
                        - /bin/bash
                        - -c
                        - |
                          #!/usr/bin/env bash

                          function quay_cmd() {
                            DATA='{}'
                            if [ ! -z "$4" ]; then
                              DATA=$4
                            fi
                            echo "[$1] $2 $3 --data $DATA" 1>&2
                            AUTH="Fake: dummy"
                            if [ $1 = "Basic" ]; then
                              COUNT=$(oc -n $QUAY_NAMESPACE get --ignore-not-found=true secret $QUAY_USER_SECRET | wc -l)
                              if [ $COUNT -gt 1 ]; then
                                  BASIC=$(oc -n $QUAY_NAMESPACE extract secret/$QUAY_USER_SECRET --keys=basic --to=-)
                              fi
                              AUTH="Authorization: Basic $BASIC"

                            elif [ $1 = "Bearer" ]; then
                              AUTH="Authorization: Bearer $TOKEN"
                            fi
                            curl -X $2 $CURL_OPTS -H 'Content-Type: application/json'  -H "$AUTH" https://$QUAY_HOST$3 --data "$DATA"
                            echo "[INFO] Success" 1>&2
                          }
                          echo -n "Waiting for the Quay Registry CR to be available ."
                          RC=$(oc wait QuayRegistry -n {{ .Values.quay.enterpriseNamespace }} registry --for=condition=Available=true > /dev/null 2>&1;echo $?)

                          while [ $RC -ne 0 ]; do
                            sleep 2
                            echo -n "."
                            RC=$(oc wait QuayRegistry -n {{ .Values.quay.enterpriseNamespace }} registry --for=condition=Available=true > /dev/null 2>&1;echo $?)
                          done
                          echo "done"

                          CURL_OPTS="-fsk"
                          QUAY_ADMIN=quayadmin
                          QUAY_USER=quaydevel
                          QUAY_USER_SECRET=$QUAY_USER
                          QUAY_NAMESPACE={{ .Values.quay.enterpriseNamespace }}
                          QUAY_HOST=$(oc get route -n $QUAY_NAMESPACE registry-quay -o jsonpath='{.spec.host}')
                          QUAY_ORG=devel
                          QUAY_ORG_EMAIL=devel@myorg.com
                          QUAY_REPO=example
                          if [ $? -ne 0 ]; then
                            echo "Quay route does not exist yet, please wait and try again."
                            exit 1
                          fi
                          RESULT=$(oc get secret -n $QUAY_NAMESPACE $QUAY_USER_SECRET)
                          if [ $? -eq 0 ]; then
                            echo "Quay user configuration secret already exists: $QUAY_USER_SECRET in namespace $QUAY_NAMESPACE"
                            exit 1
                          fi

                          ADMINPASS=`head -c 8 /dev/urandom | base64 | sed 's/=//'`
                          BASE64AUTH=`echo -n $QUAY_USER:$QUAY_PASSWORD | base64 -w0`
                          RESULT=$(curl -X POST -k -s https://$QUAY_HOST/api/v1/user/initialize --header 'Content-Type: application/json' --data "{ \"username\": \"quayadmin\", \"password\":\"${ADMINPASS}\", \"email\": \"quayadmin@example.com\", \"access_token\": true}")
                          echo "$RESULT" | grep -q "non-empty database"
                          if [ $? -eq 0 ]; then
                            echo "Quay user configuration failed, the database has been initialized."
                            exit 1
                          else
                            echo "[INFO] Destroy any previous secrets ..."
                            oc -n $QUAY_NAMESPACE delete --ignore-not-found=true secret $QUAY_USER_SECRET

                            echo "[INFO] Creating quay admin secret quayadmin ..."
                            TOKEN=$(echo "$RESULT" | tr ',' '\n' | grep access_token | awk -F: '{print $2}' | sed 's/"//g')
                            oc -n $QUAY_NAMESPACE create secret generic quayadmin --from-literal=token=$TOKEN --from-literal=password=$ADMINPASS --from-literal=basic="$BASE64AUTH"

                            echo "[INFO] Creating $QUAY_USER user ..."
                            RESPONSE=$(quay_cmd Bearer POST /api/v1/superuser/users/ "{ \"username\": \"$QUAY_USER\", \"email\": \"$QUAY_USER_EMAIL\", \"access_token\": true}")

                            QUAY_PASSWORD=$(echo $RESPONSE | tr ',' '\n' | grep '"password"' | cut -d \" -f 4)
                            BASE64AUTH=`echo -n $QUAY_USER:$QUAY_PASSWORD | base64 -w0`

                            echo "[INFO] Creating $QUAY_USER_SECRET secret ..."
                            oc -n $QUAY_NAMESPACE create secret generic $QUAY_USER_SECRET --from-literal=password="$QUAY_PASSWORD" --from-literal=basic="$BASE64AUTH"

                            echo "[INFO] Creating quay-pull-secret ..."
                            echo -e "{ \"auths\": { \"$QUAY_HOST\": { \"auth\": \"$BASE64AUTH\" } }}" | oc -n $QUAY_NAMESPACE create secret generic quay-pull-secret --from-file=.dockerconfigjson=/dev/stdin --type=kubernetes.io/dockerconfigjson

                            echo "[INFO] Creating quay integration token secret ..."
                            oc -n $QUAY_NAMESPACE create secret generic quay-integration --from-literal=token=$TOKEN
                          fi

                          echo "[INFO] Looking for initial organization ..."
                          COUNT=$(quay_cmd Bearer GET /api/v1/organization/$QUAY_ORG | grep -v not_found | wc -l)
                          if [ $COUNT = 0 ]; then
                            echo "[INFO] Creating $QUAY_ORG org ..."
                            # Email cannot be shared with the initial user
                            quay_cmd Bearer POST /api/v1/organization/ "{\"name\": \"$QUAY_ORG\", \"email\": \"$QUAY_ORG_EMAIL\" }"
                            quay_cmd Basic GET /api/v1/organization/$QUAY_ORG
                          fi

                          echo "[INFO] Looking for org application ..."
                          # The only way to get another OAuth token is to go to: Organization -> Applications -> {app} -> Generate Token
                          # If there was a programatic way to do it here, we could avoid the problem with the bearer token expiring after 150min
                          APPLICATION=automation
                          COUNT=$(quay_cmd Bearer GET /api/v1/organization/$QUAY_ORG/applications | grep $APPLICATION | wc -l)
                          if [ $COUNT = 0 ]; then
                            echo "[INFO] Creating $APPLICATION application..."
                            quay_cmd Bearer POST /api/v1/organization/$QUAY_ORG/applications "{\"name\": \"$QUAY_ORG-automation\", \"description\": \"automation app\" }"
                          fi

                          echo "[INFO] Looking for initial repo ..."
                          COUNT=$(quay_cmd Bearer GET /api/v1/repository/$QUAY_ORG/$QUAY_REPO | grep -v not_found | wc -l)
                          if [ $COUNT = 0 ]; then
                            echo "[INFO] Creating $QUAY_REPO repo..."
                            quay_cmd Bearer POST /api/v1/repository "{\"namespace\":\"$QUAY_ORG\", \"repository\":\"$QUAY_REPO\", \"visibility\":\"public\", \"description\":\"Development Repo\", \"repo_kind\":\"image\"}"
                          fi

                          echo "[INFO] Looking for $QUAY_ORG members ..."
                          COUNT=$(quay_cmd Bearer GET /api/v1/organization/$QUAY_ORG/team/owners/members | grep "name\": \"$QUAY_USER\"" | wc -l)
                          if [ $COUNT = 0 ]; then
                            echo "[INFO] Associating $QUAY_USER with $QUAY_ORG ..."
                            quay_cmd Bearer PUT /api/v1/organization/$QUAY_ORG/team/owners/members/$QUAY_USER '{}'
                          fi

                          echo "[INFO] Looking for $QUAY_REPO admins ..."
                          COUNT=$(quay_cmd Bearer GET /api/v1/repository/$QUAY_ORG/$QUAY_REPO/permissions/user/$QUAY_USER | grep '"role": "admin"' | wc -l)
                          if [ $COUNT = 0 ]; then
                            echo "[INFO] Give $QUAY_USER admin rights to the repo ..."
                            quay_cmd Bearer PUT /api/v1/repository/$QUAY_ORG/$QUAY_REPO/permissions/user/$QUAY_USER '{ "role": "admin"}'
                          fi

                          echo "[INFO] Job finished"
                        image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                        imagePullPolicy: Always
                        name: create-admin-user
                      dnsPolicy: ClusterFirst
                      restartPolicy: Never
                      serviceAccount: create-admin-user
                      serviceAccountName: create-admin-user
                      terminationGracePeriodSeconds: 30
---
apiVersion: cluster.open-cluster-management.io/v1beta1
kind: Placement
metadata:
  name: placement-policy-quay-configure
  namespace: {{ .Values.autoshiftPolicyNamespace }}
spec:
  clusterSets:
  clusterSets:
  {{- range $clusterSet, $value := .Values.managedClusterSets }}
    - {{ $clusterSet }}
  {{- end }}
  {{- range $clusterSet, $value := .Values.hubClusterSets }}
    - {{ $clusterSet }}
  {{- end }}
  predicates:
    - requiredClusterSelector:
        labelSelector:
          matchExpressions:
            - key: 'autoshift.io/quay'
              operator: In
              values:
              - 'true'
  tolerations:
    - key: cluster.open-cluster-management.io/unreachable
      operator: Exists
    - key: cluster.open-cluster-management.io/unavailable
      operator: Exists
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: placement-policy-quay-configure
  namespace: {{ .Values.autoshiftPolicyNamespace }}
placementRef:
  name: placement-policy-quay-configure
  apiGroup: cluster.open-cluster-management.io
  kind: Placement
subjects:
  - name: policy-quay-configure
    apiGroup: policy.open-cluster-management.io
    kind: Policy
